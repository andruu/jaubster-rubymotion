exit
exit5
exit
date
Date
Time.now
exit
exit
exit
exit
exit
exit
exit
Search.find { |search| search.search =~ 'php' }
Search.find { |search| search.search =~ /php/i }
Search.find { |search| search.search =~ /php/i }.length
Search.where(:location).eq('toronto')
Search.where(:location).eq('toronto').where(:search).eq('php')
Search.where(:location).eq('toronto').where(:search).eq('php').save
Search.where(:location).eq('toronto').where(:search).eq('php').collect(&save)
Search.where(:location).eq('toronto').where(:search).eq('php').collect()
Search.where(:location).eq('toronto').where(:search).eq('php').map
Search.where(:location).eq('toronto').where(:search).eq('php').methods
Search.where(:location).eq('toronto').where(:search).eq('php').class
Search.where(:location).eq('toronto').where(:search).eq('php').all
Search.where(:location).eq('toronto').where(:search).eq('php').all.map
Search.where(:location).eq('toronto').where(:search).eq('php').all.collect(&save)
Search.where(:location).eq('toronto').where(:search).eq('php').all.collect {|s| s.save}
Search.where(:location).eq('toronto').where(:search).eq('php').all
Search.destroy_all
Search.where(:location).eq('toronto').where(:search).eq('php')
Search.where(:location).eq('toronto').where(:search).eq('php') == tru
Search.where(:location).eq('toronto').where(:search).eq('php') == true
Search.where(:location).eq('toronto').where(:search).eq('php') == false
Search.where(:location).eq('toronto').where(:search).eq('php') === false
Search.where(:location).eq('toronto').where(:search).eq('php') === true
Search.where(:location).eq('toronto').where(:search).eq('php') === false
Search.where(:location).eq('toronto').where(:search).eq('php').count
Search.where(:location).eq('toronto').where(:search).eq('php').count > 0
Search.where(:location).eq('toronto').where(:search).eq('php').count >= 1
exit
Search.delete_all
Search.all
exit
options = {:search=>"", :location=>"San Francisco, California", :saved=>true}
Search.where(:location).eq(options[:location]).where(:search).eq(options[:search]).where(:saved).eq(options[:saved]).count >= 1
Search.where(:location).eq(options[:location]).where(:search).eq(options[:search]).where(:saved).eq(options[:saved]).count
Search.where(:location).eq(options[:location]).where(:search).eq(options[:search]).where(:saved).eq(options[:saved]).count >= 1
exit
Search.destroy_all
Search.all
exit
exit
exit
options = {:search=>"", :location=>"San Francisco, California", :saved=>true}
Search.where(:location).eq(options[:location]).where(:search).eq(options[:search]).where(:saved).eq(options[:saved]).count
Search.where(:location).eq(options[:location]).where(:search).eq(options[:search]).where(:saved).eq(options[:saved]).count
Search.where(:location).eq(options[:location]).where(:search).eq(options[:search]).where(:saved).eq(options[:saved]).count
Search.where(:location).eq(options[:location]).where(:search).eq(options[:search]).where(:saved).eq(options[:saved]).count
class Task
include MotionModel::Model
columns     :name => :string
has_many    :assignees
end
class Assignee
include MotionModel::Model
columns     :assignee_name => :string
belongs_to  :task
end
# Create a task, then create an assignee as a
# related object on that task
a_task = Task.create(:name => "Walk the Dog")
a_task.assignees.create(:assignee_name => "Howard")
# See? It works.
a_task.assignees.assignee_name      # => "Howard"
Task.first.assignees.assignee_name  # => "Howard"
# Create another assignee but don't save
# Add to assignees collection. Both objects
# are saved.
another_assignee = Assignee.new(:name => "Douglas")
a_task.assignees << another_assignee  # adds to relation and saves both objects
# The count of assignees accurately reflects current state
a_task.assignees.count              # => 2
# And backreference access through belongs_to works.
Assignee.first.task.name            # => "Walk the Dog"
exit
Search.destroy_all
Search.all
Search.all.first.id
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
Search.where(:location).eq(San Francisco, California).where(:search).eq().where(:saved).eq(true).all.count
exit
Search.where(:location).eq('San Francisco, California').where(:search).eq('').where(:saved).eq(true).all.count
Search.where(location: 'San Francisco, California')
exit
Search.where(:location).eq('San Francisco, California').where(:search).eq('').where(:saved).eq(true).all.count"
Search.where(:location).eq('San Francisco, California').where(:search).eq('').where(:saved).eq(true).all.count
ZAActivityBar.showErrorWithStatus('Internet connection is needed to search!')
ZAActivityBar.showErrorWithStatus('Internet connection is needed to search!')
ZAActivityBar.showErrorWithStatus('Internet connection is needed to search!')
ZAActivityBar.showErrorWithStatus('Internet connection is needed to search!')
ZAActivityBar.showErrorWithStatus('Internet connection is needed to search!')
5.time { ZAActivityBar.showErrorWithStatus('Internet connection is needed to search!') }
5.times { ZAActivityBar.showErrorWithStatus('Internet connection is needed to search!') }
Search.destroy_all
exit
Search.where(:location).eq('San Francisco, California').where(:search).eq('Ruby on Rails').where(:saved).eq(true).all.count
exit
Search.where(:location).eq('San Francisco, California').where(:search).eq('Ruby on Rails').where(:saved).eq(true).all.count
exit
exit
Search.where(:location).eq('San Francisco, California').where(:search).eq('Ruby on Rails').where(:saved).eq(true)
Search.where(:location).eq('San Francisco, California').where(:search).eq('Ruby on Rails').where(:saved).eq(true).all
Search.where(:location).eq('San Francisco, California').where(:search).eq('Ruby on Rails').where(:saved).eq(true).count
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
options = {:search=>"Php", :location=>"San Francisco, California", :saved=>true}
Search.where(:saved).eq(options[:saved]).where(:search).eq(options[:search]).all
exit
exit
Search.find {|s| s.location == 'San Francisco, California'}
Search.find {|s| s.location == 'San Francisco, California' && s.search == ''}